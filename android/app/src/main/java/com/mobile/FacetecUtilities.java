package com.mobile;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Handler;
import android.util.Base64;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.ContextThemeWrapper;
import android.view.View;
import android.view.Window;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.facebook.react.bridge.Promise;
import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;
import com.facetec.sdk.FaceTecVocalGuidanceCustomization;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import Processors.Config;
import Processors.NetworkingHelpers;
import Processors.ThemeHelpers;
import okhttp3.Call;
import okhttp3.Callback;

public class FacetecUtilities {
    public FaceTecSessionResult latestSessionResult;
    private String latestExternalDatabaseRefID = "";
    private Context context;
    private String displayStatus = "";
    public FacetecUtilities(Context context) {
        this.context = context;
    }

    public void initialize(Promise promise) {
        try {
            Config.initializeFaceTecSDKFromAutogeneratedConfig(context, new FaceTecSDK.InitializeCallback() {
                @Override
                public void onCompletion(final boolean successful) {
                    if (successful) {
                        Log.d("FaceTecSDKSampleApp", "Initialization Successful.");
                        promise.resolve(null);
                    }

                    displayStatus = FaceTecSDK.getStatus(context).toString();
                }
            });
        } catch (Error e) {
            promise.reject(e);
        }
    }

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if(!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
//                    handleErrorGettingServerSessionToken();
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                    else {
//                        handleErrorGettingServerSessionToken();
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
//                    handleErrorGettingServerSessionToken();
                }
            }
        });
    }

    public void setLatestSessionResult(FaceTecSessionResult sessionResult) {
        this.latestSessionResult = sessionResult;
    }

    public void setLatestExternalDatabaseRefID(String id) {
        latestExternalDatabaseRefID = id;
    }

    public String getLatestExternalDatabaseRefID(){
        return latestExternalDatabaseRefID;
    }

}
