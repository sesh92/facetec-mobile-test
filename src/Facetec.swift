import Foundation
import FaceTecSDK

@objc(Facetec)
class Facetec: NSObject, RCTBridgeModule, URLSessionDelegate {
  var latestSessionResult: FaceTecSessionResult!;
  var latestProcessor: Processor!
  var latestExternalDatabaseRefID: String = ""
  var displayStatus: String = "";
  
  static func moduleName() -> String {
    return "Facetec";
  }

  static func requiresMainQueueSetup() -> Bool {
    return true;
  }
  
  @objc
  func initialize(_ appTheme: String, resolver: RCTPromiseResolveBlock, rejecter reject: RCTPromiseRejectBlock) -> Void {
    print("Facetec initializing");
    Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
      self.displayStatus = FaceTec.sdk.description(for: FaceTec.sdk.getStatus());
      print(self.displayStatus);
    })
    ThemeHelpers.setAppTheme();
    resolver(nil);
  }

  @objc
  func enroll(_ resolver: @escaping RCTPromiseResolveBlock, rejecter reject: RCTPromiseRejectBlock) -> Void {
    print("Facetec enrolling");
    getSessionToken() { sessionToken in
      self.latestExternalDatabaseRefID = "ios_sample_app_" + UUID().uuidString
      self.latestProcessor = EnrollmentProcessor(sessionToken: sessionToken, module: self, resolver: resolver)
    }
  }
  
  @objc
  func authenticate(_ resolver: @escaping RCTPromiseResolveBlock, rejecter reject: RCTPromiseRejectBlock) -> Void {
    print("Facetec authenticating");
    getSessionToken() { sessionToken in
      self.latestProcessor = AuthenticateProcessor(sessionToken: sessionToken, module: self, resolver: resolver)
    }
  }
  
  func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
      let endpoint = Config.BaseURL + "/session-token"
      let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
      request.httpMethod = "GET"
      // Required parameters to interact with the FaceTec Managed Testing API.
      request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
      request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
      
      let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
      let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
          // Ensure the data object is not nil otherwise callback with empty dictionary.
          guard let data = data else {
              print("Exception raised while attempting HTTPS call.")
              return
          }
        if let responseJSONObj = try? (JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as! [String: AnyObject]) {
            if((responseJSONObj["sessionToken"] as? String) != nil)
            {
              sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
              return
            }
            else {
              print("Exception raised while attempting HTTPS call.")
              self.displayStatus = "Session could not be started due to an unexpected issue during the network request.";
              print(self.displayStatus);
              
            }
          }
      })
      task.resume()
  }
  
  func setLatestSessionResult(sessionResult: FaceTecSessionResult) {
      latestSessionResult = sessionResult
  }
  
  func getLatestExternalDatabaseRefID() -> String {
      return latestExternalDatabaseRefID;
  }
}
